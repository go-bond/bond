package suites

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *TokenBalance) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "AccountID":
			z.AccountID, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "AccountID")
				return
			}
		case "ContractAddress":
			z.ContractAddress, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ContractAddress")
				return
			}
		case "AccountAddress":
			z.AccountAddress, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "AccountAddress")
				return
			}
		case "TokenID":
			z.TokenID, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "TokenID")
				return
			}
		case "Balance":
			z.Balance, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Balance")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *TokenBalance) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "ID"
	err = en.Append(0x86, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.ID)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// write "AccountID"
	err = en.Append(0xa9, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.AccountID)
	if err != nil {
		err = msgp.WrapError(err, "AccountID")
		return
	}
	// write "ContractAddress"
	err = en.Append(0xaf, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.ContractAddress)
	if err != nil {
		err = msgp.WrapError(err, "ContractAddress")
		return
	}
	// write "AccountAddress"
	err = en.Append(0xae, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.AccountAddress)
	if err != nil {
		err = msgp.WrapError(err, "AccountAddress")
		return
	}
	// write "TokenID"
	err = en.Append(0xa7, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.TokenID)
	if err != nil {
		err = msgp.WrapError(err, "TokenID")
		return
	}
	// write "Balance"
	err = en.Append(0xa7, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Balance)
	if err != nil {
		err = msgp.WrapError(err, "Balance")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TokenBalance) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "ID"
	o = append(o, 0x86, 0xa2, 0x49, 0x44)
	o = msgp.AppendUint64(o, z.ID)
	// string "AccountID"
	o = append(o, 0xa9, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44)
	o = msgp.AppendUint32(o, z.AccountID)
	// string "ContractAddress"
	o = append(o, 0xaf, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	o = msgp.AppendString(o, z.ContractAddress)
	// string "AccountAddress"
	o = append(o, 0xae, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	o = msgp.AppendString(o, z.AccountAddress)
	// string "TokenID"
	o = append(o, 0xa7, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44)
	o = msgp.AppendUint32(o, z.TokenID)
	// string "Balance"
	o = append(o, 0xa7, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65)
	o = msgp.AppendUint64(o, z.Balance)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TokenBalance) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "AccountID":
			z.AccountID, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AccountID")
				return
			}
		case "ContractAddress":
			z.ContractAddress, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ContractAddress")
				return
			}
		case "AccountAddress":
			z.AccountAddress, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AccountAddress")
				return
			}
		case "TokenID":
			z.TokenID, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TokenID")
				return
			}
		case "Balance":
			z.Balance, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Balance")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TokenBalance) Msgsize() (s int) {
	s = 1 + 3 + msgp.Uint64Size + 10 + msgp.Uint32Size + 16 + msgp.StringPrefixSize + len(z.ContractAddress) + 15 + msgp.StringPrefixSize + len(z.AccountAddress) + 8 + msgp.Uint32Size + 8 + msgp.Uint64Size
	return
}
